<?php

namespace Anytv\DashboardBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AffiliateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AffiliateRepository extends EntityRepository
{
    public function findAllAffiliates($page, $items_per_page, $order_by, $order, $keyword, $country_id, $status, $with_paypal)
    {
        $first_result = ($items_per_page * ($page-1));
        
        $query = $this->createQueryBuilder('a')
                      ->leftJoin('a.country', 'c');
        
        $where = "a.status = :status";
        $params = array('status'=>$status);
        
        if($keyword)
        {
          $where .= " AND a.company LIKE :keyword";
          $params['keyword'] = "%$keyword%"; 
        }
        
        if($country_id)
        {
          $where .= " AND c.id = :country_id";
          $params['country_id'] = $country_id; 
        }
        
        if($with_paypal)
        {
          $where .= " AND a.paypalEmail IS NOT NULL";
        }
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->setFirstResult($first_result)
                       ->setMaxResults($items_per_page)
                       ->orderBy('a.'.$order_by, $order)
                       ->getQuery();
          
        return $query->getResult();
    }
    
    public function countAllAffiliates($keyword, $country_id, $status, $with_paypal)
    {    
        $query = $this->createQueryBuilder('a')
                      ->select('count(a.id)')
                      ->leftJoin('a.country', 'c');
        
        $where = "a.status = :status";
        $params = array('status'=>$status);
        
        if($keyword)
        {
          $where .= " AND a.company LIKE :keyword";
          $params['keyword'] = "%$keyword%"; 
        }
        
        if($country_id)
        {
          $where .= " AND c.id = :country_id";
          $params['country_id'] = $country_id; 
        }
        
        if($with_paypal)
        {
          $where .= " AND a.paypalEmail IS NOT NULL";
        }
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->getQuery(); 
          
        return $query->getSingleScalarResult();
    }
    
    public function findAllAffiliatesByCountry($page, $items_per_page, $order_by, $order, $country, $status)
    {
      $first_result = ($items_per_page * ($page-1));
        
      $query = $this->createQueryBuilder('a');
        
      $where = "a.status = :status";
      $params = array('status'=>$status);  
        
      $where .= " AND a.country = :country";
      $params['country'] = $country;   
        
      $query = $query->where($where)
                     ->setParameters($params)
                     ->setFirstResult($first_result)
                     ->setMaxResults($items_per_page)
                     ->orderBy('a.'.$order_by, $order)
                     ->getQuery();
          
      return $query->getResult();
    }
    
    public function countAllAffiliatesByCountry($country, $status)
    {    
        $query = $this->createQueryBuilder('a')
                      ->select('count(a.id)');
        
        $where = "a.status = :status AND a.country = :country";
        $params = array('status'=>$status, 'country'=>$country);
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->getQuery(); 
          
        return $query->getSingleScalarResult();
    }
    
    public function getMaxAffiliateId()
    {    
        $query = $this->createQueryBuilder('a')
                      ->select('max(a.affiliateId)')
                      ->getQuery();
        
        return $query->getSingleScalarResult();
    }
    
    public function findAllAffiliatesByReferrer($referrer, $page, $items_per_page, $order_by, $order)
    {
        $first_result = ($items_per_page * ($page-1));
        
        $query = $this->createQueryBuilder('a');
        
        $where = "a.referrer = :referrer";
        $params = array('referrer'=>$referrer);
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->setFirstResult($first_result)
                       ->setMaxResults($items_per_page)
                       ->orderBy('a.'.$order_by, $order)
                       ->getQuery();
          
        return $query->getResult();
    }
    
    public function countAllAffiliatesByReferrer($referrer)
    {    
        $query = $this->createQueryBuilder('a')
                      ->select('count(a.id)');
        
        $where = "a.referrer = :referrer";
        $params = array('referrer'=>$referrer);
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->getQuery(); 
          
        return $query->getSingleScalarResult();
    }
    
    public function findAllReferredAffiliatesForGraph($order_by, $order, $affiliate)
    {
        $query = $this->createQueryBuilder('a');
        
        $where = "a.referrer = :referrer";
        $params = array('referrer'=>$affiliate);
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->orderBy('a.'.$order_by, $order)
                       ->getQuery();
          
        return $query->getResult();   
    }
    
    public function findAllAffiliatesFiltered($page, $items_per_page, $order_by, $order_by_2, $order)
    {
      $first_result = ($items_per_page * ($page-1));
        
      $query = $this->createQueryBuilder('a');
      
        $query = $query->setFirstResult($first_result)
                       ->setMaxResults($items_per_page)
                       ->addOrderBy('a.'.$order_by, $order)
                       ->addOrderBy('a.'.$order_by_2, $order)
                       ->getQuery();
          
      return $query->getResult();
    }
    
    public function countAllAffiliatesFiltered()
    {    
        $query = $this->createQueryBuilder('a')
                      ->select('count(a.id)');
        
        
        
        $query = $query->getQuery(); 
          
        return $query->getSingleScalarResult();
    }
}
