<?php

namespace Anytv\DashboardBundle\Entity;

use Doctrine\ORM\EntityRepository;
//use Doctrine\ORM\Query\Expr;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends EntityRepository
{
    public function findAllOffers($page, $items_per_page, $order_by, $order, $keyword, $status, $category = null, $country = null, $non_zero_payout = false)
    {
        $first_result = ($items_per_page * ($page-1));
        
        $query = $this->createQueryBuilder('o');
        
        $where = "o.status = :status AND o.name LIKE :keyword";
        $params = array('status'=>$status, 'keyword'=>"%$keyword%");
                
        if($category)
        {
          $query = $query->join('o.offerCategories', 'oc');
          $where .= " AND oc.id = :category";
          $params['category'] = $category;
        }
        
        if($country)
        {
          $query = $query->join('o.countries', 'c');
          $where .= " AND c.id = :country";
          $params['country'] = $country;
        }
        
        if($non_zero_payout)
        {
          $where .= " AND o.default_payout > :default_payout AND o.default_payout = (SELECT MAX(o2.default_payout) FROM AnytvDashboardBundle:Offer AS o2 WHERE o2.id = o.id GROUP BY o2.name)";
          $params['default_payout'] = 0;
        }
        
        if($non_zero_payout)
        {
          $query = $query->where($where)
                         ->setParameters($params)
                         ->setFirstResult($first_result)
                         ->setMaxResults($items_per_page)
                         ->groupBy('o.name')
                         ->orderBy('o.'.$order_by, $order)
                         //->addOrderBy('o.default_payout', 'DESC')
                         ->getQuery();
        }
        else
        {
          $query = $query->where($where)
                         ->setParameters($params)
                         ->setFirstResult($first_result)
                         ->setMaxResults($items_per_page)
                         ->orderBy('o.'.$order_by, $order)
                         ->getQuery();    
        }
        
        return $query->getResult();
    }
    
    public function countAllOffers($keyword, $status, $category = null, $country = null, $non_zero_payout = false)
    {    
        $query = $this->createQueryBuilder('o')
                      ->select('count(o.id)');
        
        $where = "o.status = :status AND o.name LIKE :keyword";
        $params = array('status'=>$status, 'keyword'=>"%$keyword%");
        
        if($category)
        {
          $query = $query->join('o.offerCategories', 'oc');
          $where .= " AND oc.id = :category";
          $params['category'] = $category;
        }
        
        if($country)
        {
          $query = $query->join('o.countries', 'c');
          $where .= " AND c.id = :country";
          $params['country'] = $country;
        }
        
        if($non_zero_payout)
        {
          $where .= " AND o.default_payout > :default_payout";
          $params['default_payout'] = 0;
        }
        
        if($non_zero_payout)
        {
          $query = $query->where($where)
                       ->setParameters($params)
                       ->groupBy('o.name')
                       ->getQuery();   
          
          return count($query->getResult());
        }
        else
        {
          $query = $query->where($where)
                       ->setParameters($params)
                       ->getQuery(); 
          
          return $query->getSingleScalarResult();
        }
    }
    
    public function getMaxOfferId()
    {    
        $query = $this->createQueryBuilder('o')
                      ->select('max(o.offerId)')
                      ->getQuery();
        
        return $query->getSingleScalarResult();
    }
    
    public function findNotUpdatedOffers()
    {
        $query = $this->createQueryBuilder('o');
        
        //$where = "o.status = :status AND (o.updated_at IS NULL OR o.updated_at < :yesterday)";
        //$params = array('status'=>'active', 'yesterday'=>'DATE_SUB(NOW(), INTERVAL 1 DAY)');
        
        $where = "o.updated_at IS NULL";
        
        
        $query = $query->where($where)
                       
                       ->setMaxResults(50)
                       ->getQuery();    
        
        return $query->getResult();
    }
    
    public function getMaxUpdatedAt()
    {    
        $query = $this->createQueryBuilder('o')
                      ->select('max(o.updated_at)')
                      ->getQuery();
        
        return $query->getSingleScalarResult();
    }
    
    public function findAllOffersByCountry($page, $items_per_page, $order_by, $order, $country)
    {
      $first_result = ($items_per_page * ($page-1));
        
      $query = $this->createQueryBuilder('o');
        
      $query = $query->join('o.countries', 'c');
      $where = "c.id = :country";
      $params = array('country'=>$country);  
        
      $query = $query->where($where)
                     ->setParameters($params)
                     ->setFirstResult($first_result)
                     ->setMaxResults($items_per_page)
                     ->orderBy('o.'.$order_by, $order)
                     ->getQuery();
          
      return $query->getResult();
    }
    
    public function countAllOffersByCountry($country)
    {    
        $query = $this->createQueryBuilder('o')
                      ->select('count(o.id)');
        
        $query = $query->join('o.countries', 'c');
        $where = "c.id = :country";
        $params = array('country'=>$country);  
        
        $query = $query->where($where)
                       ->setParameters($params)
                       ->getQuery(); 
          
        return $query->getSingleScalarResult();
    }
}
