<?php

namespace Anytv\DashboardBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ConversionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversionRepository extends EntityRepository
{
    public function findAllConversions($page, $items_per_page, $order_by, $order, $affiliate = null, $start_date = null, $end_date = null)
    {
        $first_result = ($items_per_page * ($page-1));
        
        $query = $this->createQueryBuilder('c');
        
        if($affiliate)
        {
          $where = "c.affiliate = :affiliate AND c.status = :status";
          $params = array('affiliate'=>$affiliate, 'status'=>'approved');
          
          if($start_date)
          {
            $where .= " AND c.createdAt >= :start_date";
            $params['start_date'] = $start_date;    
          }
          
          if($end_date)
          {
            $where .= " AND c.createdAt <= :end_date";
            $params['end_date'] = $end_date;    
          }
          
          $query = $query->where($where)
                         ->setParameters($params)
                         ->setFirstResult($first_result)
                         ->setMaxResults($items_per_page)
                         ->orderBy('c.'.$order_by, $order)
                         ->getQuery();  
        }
        else
        {
          $query = $query->setFirstResult($first_result)
                         ->setMaxResults($items_per_page)
                         ->orderBy('c.'.$order_by, $order)
                         ->getQuery();  
        }
          
        return $query->getResult();
    }
    
    public function findAllAffiliateConversions($order_by, $order, $affiliate = null, $start_date = null, $end_date = null)
    {
        $query = $this->createQueryBuilder('c');
        
        if($affiliate)
        {
          $where = "c.affiliate = :affiliate AND c.status = :status";
          $params = array('affiliate'=>$affiliate, 'status'=>'approved');
          
          if($start_date)
          {
            $where .= " AND c.createdAt >= :start_date";
            $params['start_date'] = $start_date;    
          }
          
          if($end_date)
          {
            $where .= " AND c.createdAt <= :end_date";
            $params['end_date'] = $end_date;    
          }
          
          $query = $query->where($where)
                         ->setParameters($params)
                         ->orderBy('c.'.$order_by, $order)
                         ->getQuery();  
        }
        else
        {
          $query = $query->orderBy('c.'.$order_by, $order)
                         ->getQuery();  
        }
          
        return $query->getResult();
    }
    
    public function countAllConversions($affiliate = null, $start_date = null, $end_date = null)
    {    
        $query = $this->createQueryBuilder('c')
                      ->select('count(c.id)');
        
        if($affiliate)
        {
          $where = "c.affiliate = :affiliate AND c.status = :status";
          $params = array('affiliate'=>$affiliate, 'status'=>'approved');
          
          if($start_date)
          {
            $where .= " AND c.createdAt >= :start_date";
            $params['start_date'] = $start_date;    
          }
          
          if($end_date)
          {
            $where .= " AND c.createdAt <= :end_date";
            $params['end_date'] = $end_date;    
          }
          
          $query = $query->where($where)
                         ->setParameters($params)
                         ->getQuery();
        }
        else
        {
          $query = $query->getQuery(); 
        } 
          
        return $query->getSingleScalarResult();
    }
    
    public function getMaxConversionId()
    {    
        $query = $this->createQueryBuilder('c')
                      ->select('max(c.conversionId)')
                      ->getQuery();
        
        return $query->getSingleScalarResult();
    }
    
    public function findAllConversionsForGraph($order_by, $order, $affiliate = null, $start_date = null, $end_date = null)
    {
        $query = $this->createQueryBuilder('c');
        
        $where = "c.affiliate = :affiliate AND c.status = :status";
        $params = array('affiliate'=>$affiliate, 'status'=>'approved');
          
        if($start_date)
        {
          $where .= " AND c.createdAt >= :start_date";
          $params['start_date'] = $start_date;    
        }
          
        if($end_date)
        {
          $where .= " AND c.createdAt <= :end_date";
          $params['end_date'] = $end_date;    
        }
          
        $query = $query->where($where)
                       ->setParameters($params)
                       ->orderBy('c.'.$order_by, $order)
                       ->getQuery();  
        
        return $query->getResult();
    }
}
